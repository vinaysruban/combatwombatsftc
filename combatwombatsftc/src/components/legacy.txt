/*const toggleDarkMode = () => {
    import { useEffect } from "react";
  if (localStorage.theme === 'dark') {
    localStorage.theme = 'light'
  } else {
    localStorage.theme = 'dark'
  }
  useEffect(() => {
    // Perform localStorage action
    if (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      localStorage.theme = 'dark'
    } else {
      localStorage.theme = 'light'
    }
  }, [])
      <button onClick={toggleDarkMode}>devdarkmode under consturction</button>
}*/

//*<Image
          src="/robot2.png"
          alt="Wombat"
          width={580}
          height={0}
          style={imageStyle}
        />*/

        const imageStyle = {
    position: "absolute",
    bottom: "-10rem",
    right: "-54rem",
    width: "64rem",
  } as React.CSSProperties;

  const imageStyle = {
    position: "absolute",
    bottom: "-6rem",
    right: "-36rem",
    width: "48rem",
  } as React.CSSProperties;

  <div className="grid grid-flow-col auto-cols-max justify-evenly    ">
        <div className="max-w-lg border-black rounded-2xl px-12 py-6 child:mx-auto break-words">
          <Image
            alt={"A placeholder"}
            src={"/imadsage.png"}
            width={"100"}
            height={600}
            className="w-full h-auto"
          />
          <h2 className="text-3xl mx-auto font-bold my-4">Motivate Award</h2>
          <p>
            blach lac blach lac blach lac
            blachasdddddddddddddddddddddddddddddddddddddddddddddddd lac blach
            lac blach lac{" "}
          </p>
        </div>
        <div className="max-w-lg border-4 border-black rounded-2xl px-12 py-6 child:mx-auto break-words">
          <Image
            alt={"A placeholder"}
            src={"/team_name.png"}
            width={"100"}
            height={600}
            className="w-full h-60"
          />
          <h2 className="text-3xl mx-auto font-bold my-4">
            Something Choice's Award
          </h2>
          <p>
            Some other award some choice smth this to u juan lac blach lac blach
            lac blachasddddddddddddddddddddddddddddddddddddddddd lac blach lac
            blach lac blachasddddddddddddddddddddddddddddddddddddddddd
          </p>
        </div>
      </div>

      export function Robot() {
  const [mount, setMount] = useState<boolean>(false);

  useEffect(() => {
    setMount(true);
  }, []);

  const imageStyle = {
    position: "absolute",
    bottom: "-14.5rem",
    right: "-3rem",
    marginRight: "1rem",
  } as React.CSSProperties;

  const imageStyleXL = {
    position: "absolute",
    bottom: "-14rem",
    right: "-58rem",
  } as React.CSSProperties;

  const imageStyleL = {
    position: "absolute",
    bottom: "-6rem",
    right: "-38rem",
  } as React.CSSProperties;

  const imageStyleM = {
    marginLeft: "auto",
    marginRight: "auto",
  } as React.CSSProperties;

  const [width, setWidth] = useState<number>(0);

  useEffect(() => {
    function handleResize() {
      setWidth(window.innerWidth);
    }

    window.addEventListener("resize", handleResize);
    handleResize();
    console.log(width);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  function widthGiven(width: number) {
    if (width < 768) {
      return 500;
    } else if (width < 1024) {
      return 580;
    } else if (width > 2248) {
      return 1088;
    } else if (width > 1920) {
      return 768;
    } else {
      return 580;
    }
  }

  function classGiven(widths: number) {
    if (widths < 768) {
      return imageStyleM;
    } else if (widths < 1024) {
      return imageStyleM
    } else if (widths > 2248) {
      return imageStyleXL;
    } else if (widths > 1920) {
      return imageStyleL;
    } else {
      return imageStyle;
    }
  }

  return (
      <Image
        src="/robot2.png"
        alt="An image of the robot"
        sizes="(max-width: 768px) 31rem, (max-width: 1024px) 36rem, (min-width: 2248px) 68rem, (min-width: 1920px) 48rem, 31rem"
        priority
        width={0}
        height={0}
        className="widths"
      />
  );
}

const [ref, inView, entry] = useInView();
  const [animated, setAnimated] = useState<boolean>();

  function checkView() {
    if (inView && !animated) {
      return "in-screen";
    } else if (inView && animated) {
      return "out-screen";
    } else {
      return "";
    }
  }

  function sleep(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  useEffect(() => {
    if (inView) {
      sleep(6500).then(() => {
        setAnimated(true);
      });
    }
  }, [inView]);

  "use client";

import { useEffect, useRef } from 'react';
import webGLFluidEnhanced from 'webgl-fluid-enhanced';
import { useTheme } from "next-themes";


export default function CTA() {
    const canvasRef = useRef(null);
    const {setTheme, resolvedTheme} = useTheme();

    useEffect(() => {
      webGLFluidEnhanced.simulation(canvasRef.current!, {
        PRESSURE: 0.8,
        PRESSURE_ITERATIONS: 20,
        SUNRAYS: false,
        DENSITY_DISSIPATION: 1,
        VELOCITY_DISSIPATION: 0.2,
        CURL: 30,
        BLOOM: true,
        BLOOM_ITERATIONS: 8,
        BLOOM_RESOLUTION: 256,
        BLOOM_INTENSITY: 0.8,
        BLOOM_THRESHOLD: 0.6,
        BLOOM_SOFT_KNEE: 0.7,
        SUNRAYS_RESOLUTION: 196,
        SUNRAYS_WEIGHT: 1,
        COLOR_PALETTE: [],
        COLOR_UPDATE_SPEED: 10,
        BRIGHTNESS: 0.5,
        BACK_COLOR: resolvedTheme == "light" ? '#EBE2D3' : "#171717",
      });
    }, []);

    useEffect(() => {
        webGLFluidEnhanced.simulation(canvasRef.current!, {
            BACK_COLOR: resolvedTheme == "light" ? '#EBE2D3' : "#171717",
        });
    }, [resolvedTheme]);

  return (
    <canvas ref={canvasRef} className="w-full h-full" />
  );
}

const { rows } = await sql`SELECT pages FROM misc WHERE id = 1;`;
  console.log(rows.forEach((row) => console.log(row)));

  let pages: string[][] = [];
  for (const row of rows) {
    pages.push(row.pages);
  }

  const pageList: string[] = pages[0];