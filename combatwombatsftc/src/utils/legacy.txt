/*const toggleDarkMode = () => {
    import { useEffect } from "react";
  if (localStorage.theme === 'dark') {
    localStorage.theme = 'light'
  } else {
    localStorage.theme = 'dark'
  }
  useEffect(() => {
    // Perform localStorage action
    if (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      localStorage.theme = 'dark'
    } else {
      localStorage.theme = 'light'
    }
  }, [])
      <button onClick={toggleDarkMode}>devdarkmode under consturction</button>
}*/

//*<Image
          src="/robot2.png"
          alt="Wombat"
          width={580}
          height={0}
          style={imageStyle}
        />*/

        const imageStyle = {
    position: "absolute",
    bottom: "-10rem",
    right: "-54rem",
    width: "64rem",
  } as React.CSSProperties;

  const imageStyle = {
    position: "absolute",
    bottom: "-6rem",
    right: "-36rem",
    width: "48rem",
  } as React.CSSProperties;

  <div className="grid grid-flow-col auto-cols-max justify-evenly    ">
        <div className="max-w-lg border-black rounded-2xl px-12 py-6 child:mx-auto break-words">
          <Image
            alt={"A placeholder"}
            src={"/imadsage.png"}
            width={"100"}
            height={600}
            className="w-full h-auto"
          />
          <h2 className="text-3xl mx-auto font-bold my-4">Motivate Award</h2>
          <p>
            blach lac blach lac blach lac
            blachasdddddddddddddddddddddddddddddddddddddddddddddddd lac blach
            lac blach lac{" "}
          </p>
        </div>
        <div className="max-w-lg border-4 border-black rounded-2xl px-12 py-6 child:mx-auto break-words">
          <Image
            alt={"A placeholder"}
            src={"/team_name.png"}
            width={"100"}
            height={600}
            className="w-full h-60"
          />
          <h2 className="text-3xl mx-auto font-bold my-4">
            Something Choice's Award
          </h2>
          <p>
            Some other award some choice smth this to u juan lac blach lac blach
            lac blachasddddddddddddddddddddddddddddddddddddddddd lac blach lac
            blach lac blachasddddddddddddddddddddddddddddddddddddddddd
          </p>
        </div>
      </div>

      export function Robot() {
  const [mount, setMount] = useState<boolean>(false);

  useEffect(() => {
    setMount(true);
  }, []);

  const imageStyle = {
    position: "absolute",
    bottom: "-14.5rem",
    right: "-3rem",
    marginRight: "1rem",
  } as React.CSSProperties;

  const imageStyleXL = {
    position: "absolute",
    bottom: "-14rem",
    right: "-58rem",
  } as React.CSSProperties;

  const imageStyleL = {
    position: "absolute",
    bottom: "-6rem",
    right: "-38rem",
  } as React.CSSProperties;

  const imageStyleM = {
    marginLeft: "auto",
    marginRight: "auto",
  } as React.CSSProperties;

  const [width, setWidth] = useState<number>(0);

  useEffect(() => {
    function handleResize() {
      setWidth(window.innerWidth);
    }

    window.addEventListener("resize", handleResize);
    handleResize();
    console.log(width);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  function widthGiven(width: number) {
    if (width < 768) {
      return 500;
    } else if (width < 1024) {
      return 580;
    } else if (width > 2248) {
      return 1088;
    } else if (width > 1920) {
      return 768;
    } else {
      return 580;
    }
  }

  function classGiven(widths: number) {
    if (widths < 768) {
      return imageStyleM;
    } else if (widths < 1024) {
      return imageStyleM
    } else if (widths > 2248) {
      return imageStyleXL;
    } else if (widths > 1920) {
      return imageStyleL;
    } else {
      return imageStyle;
    }
  }

  return (
      <Image
        src="/robot2.png"
        alt="An image of the robot"
        sizes="(max-width: 768px) 31rem, (max-width: 1024px) 36rem, (min-width: 2248px) 68rem, (min-width: 1920px) 48rem, 31rem"
        priority
        width={0}
        height={0}
        className="widths"
      />
  );
}

const [ref, inView, entry] = useInView();
  const [animated, setAnimated] = useState<boolean>();

  function checkView() {
    if (inView && !animated) {
      return "in-screen";
    } else if (inView && animated) {
      return "out-screen";
    } else {
      return "";
    }
  }

  function sleep(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  useEffect(() => {
    if (inView) {
      sleep(6500).then(() => {
        setAnimated(true);
      });
    }
  }, [inView]);

  "use client";

import { useEffect, useRef } from 'react';
import webGLFluidEnhanced from 'webgl-fluid-enhanced';
import { useTheme } from "next-themes";


export default function CTA() {
    const canvasRef = useRef(null);
    const {setTheme, resolvedTheme} = useTheme();

    useEffect(() => {
      webGLFluidEnhanced.simulation(canvasRef.current!, {
        PRESSURE: 0.8,
        PRESSURE_ITERATIONS: 20,
        SUNRAYS: false,
        DENSITY_DISSIPATION: 1,
        VELOCITY_DISSIPATION: 0.2,
        CURL: 30,
        BLOOM: true,
        BLOOM_ITERATIONS: 8,
        BLOOM_RESOLUTION: 256,
        BLOOM_INTENSITY: 0.8,
        BLOOM_THRESHOLD: 0.6,
        BLOOM_SOFT_KNEE: 0.7,
        SUNRAYS_RESOLUTION: 196,
        SUNRAYS_WEIGHT: 1,
        COLOR_PALETTE: [],
        COLOR_UPDATE_SPEED: 10,
        BRIGHTNESS: 0.5,
        BACK_COLOR: resolvedTheme == "light" ? '#EBE2D3' : "#171717",
      });
    }, []);

    useEffect(() => {
        webGLFluidEnhanced.simulation(canvasRef.current!, {
            BACK_COLOR: resolvedTheme == "light" ? '#EBE2D3' : "#171717",
        });
    }, [resolvedTheme]);

  return (
    <canvas ref={canvasRef} className="w-full h-full" />
  );
}

const { rows } = await sql`SELECT pages FROM misc WHERE id = 1;`;
  console.log(rows.forEach((row) => console.log(row)));

  let pages: string[][] = [];
  for (const row of rows) {
    pages.push(row.pages);
  }

  const pageList: string[] = pages[0];

  import { MDXRemote } from "next-mdx-remote/rsc";
import fs from "fs";
import path from "path";
import { Roboto_Mono } from 'next/font/google'
import { capitalizeFirstLetter } from "@/utils/utils";
import { metadata } from '../../layout';
import { get } from "http";
import dynamic from 'next/dynamic'
import And from '/and.mdx'

const roboto = Roboto_Mono({ subsets: ['latin'] })



async function getContent(page: string) {
  const configDirectory = path.resolve(process.cwd(), "public/content");
  const file = `${page}.mdx`;
  try {
    return fs.readFileSync(path.join(configDirectory, file), "utf8");
  } catch (error) {
    console.error(error);
    return "# Sorry, we don't have that yet.\nContact us and we'll see what we can do. <br />```Error 404```";
  }
}

export default async function Page({ params }: { params: { page: string } }) {
  const page = params.page;
  const content = await getContent(page);
  const mdstyles =
    "descendant:text-wrap descendant:break-words child-h1:text-2xl sm:child-h1:text-4xl md:child-h1:text-6xl child-h1:font-bold child-h1:my-8 child-h2:text-2xl child-h2:font-bold child-h2:my-6 child-p:my-4 child-p:text-base descendant-img:my-8 child-ul:list-disc child-blockquote:max-w-small child-blockquote:italic child-blockquote:px-4 child-blockquote:border-l-4 child-blockquote:border-black dark:child-blockquote:border-white child-pre:bg-midbeige dark:child-pre:bg-mutegrey child-pre:pl-4 child-pre:py-2 child-pre:rounded-md child-pre:text-wrap";

  return (
    <section className={roboto.className}>
      <section className={`px-2 sm:px-6 md:px-12 py-12 h-full w-4/5 max-w-screen-3xl mx-auto ${mdstyles} `}>
        <h1>{capitalizeFirstLetter(page.split('~')[0].replace(/-/g, ' ') + ".")}</h1>
        <hr className=" border-t-2 mb-3 border-black dark:border-white"></hr>
        <i>{page.split('~')[1]}</i>
        <MDXRemote source={content} />
        <And />
        <code className="italic">Page Slug: {params.page}</code>
        <code className="italic">Page Name:test:01:cred:(insert:code:200)</code>
      </section>
    </section>
  );
}

{capitalizeFirstLetter(page.slice(0, -3).split('~')[0].replace(/-/g, ' ') + ".")}

        <h1>{capitalizeFirstLetter(page.split('~')[0].replace(/-/g, ' ') + ".")}</h1>

async function getContent(page: string) {
  const configDirectory = path.resolve(process.cwd(), "public/content");
  const file = `${page}.mdx`;
  try {
    return fs.readFileSync(path.join(configDirectory, file), "utf8");
  } catch (error) {
    console.error(error);
    return "# Sorry, we don't have that yet.\nContact us and we'll see what we can do. <br />```Error 404```";
  }
}


async function getFiles() {
  const configDirectory = path.resolve(process.cwd(), "public/content");
  const pages: string[] = [];

  try {
    const files = await fs.readdir(configDirectory);
    for (const file of files) {
      pages.push(file);
    }
  } catch (err) {
    console.error(err);
  }

  return pages;
}

const fs = require("fs");

console.log("running");
const testFolder = "./contrans/";

const readline = require("readline");
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

fs.readdir(testFolder, (err, files) => {
  files.forEach((file) => {
    console.log(
      "./contrans/" + file + ", mb the function only does one file at a time. no full stop (.) just words and spaces and remember to end with a character not a space"
    );
    rl.question("What is the name of the file ", function (namefile) {
      let str = namefile;
      str = str.replace(/\s+/g, "-").toLowerCase();

      const date = new Date();
      let day = date.getDate();
      let month = date.getMonth() + 1;
      let year = date.getFullYear();

      let currentDate = `${day}-${month}-${year}`;
      fs.rename(
        "./contrans/" + file,
        "./combatwombatsftc/public/content/" + str + "~" + currentDate + ".md",
        (err) => {
          if (err) {
            console.log(err);
          }
        }
      );
      rl.close();
    });
  });
});

//!IMPORTANT

let response = await fetch(path.join(`/api/${slug}`), {
    method: "GET",
  });

  let post = await response.json();
  console.log(post);

  <div
                  id="trailer"
                  ref={trailer as React.RefObject<HTMLDivElement>}
                  className="w-10 h-10 fixed block left-0 top-0 rounded-full bg-red-800"
                >
                  <i id="trailer-icon" className=""></i>
                </div>

                onMouseMove={(e) => hello(e)}

                 const trailer = useRef<HTMLElement>();

  const animateTrailer = (e: any, interacting: any) => {
    if (trailer.current) {
      const x = e.clientX - trailer.current.offsetHeight / 2,
        y = e.clientY - trailer.current.offsetWidth / 2;

      const keyframes = {
        transform: `translate(${x}px, ${y}px) scale(${interacting ? 8 : 1})`,
      };

      trailer.current.animate(keyframes, {
        duration: 800,
        fill: "forwards",
      });
    }
  };

  function hello(e: any) {
    const interactable = e.target.closest(".interactable"),
      interacting = interactable !== null;

    if (trailer.current) {
      trailer.current.style.position = "fixed";
    }
    animateTrailer(e, interacting);
  }

  import { useState, useEffect, useRef } from "react";

  <hr className=" bg-[url('/images/svgLarge/3.svg')] w-full h-min bg-cover aspect-[600/50] md:aspect-[1800/100] bg-center border-none" />
        <hr className=" bg-[url('/images/svgLarge/4.svg')] w-full h-min bg-cover aspect-[600/50] md:aspect-[1800/100] bg-center border-none rotate-180" />

        <hr className=" text-[0] bg-[url('/images/svgLarge/1.svg')] w-full h-min bg-cover aspect-[600/50] md:aspect-[1800/100] bg-bottom border-none" />
        <hr className=" bg-[url('/images/svgLarge/2.svg')] w-full h-min bg-cover aspect-[600/50] md:aspect-[1800/100] border-none rotate-180" />

function createMap(array: any[]) {
  return array.map((post) => {
    return (
      <Link
        href={`/docs/${post.slug}`}
        key={post.slug}
        className={roboto.className}
      >
        <li className="border-2 md:border-4 border-black dark:border-white px-6 py-2 rounded-xl">
          <h1 className="sm:text-xl md:text-xl lg:text-2xl 2xl:text-3xl font-semibold my-1 md:my-2 xl:my-3">
            {post.title}
          </h1>
          <i className="my-1 md:my-2 lg:my-3 3xl:my-2 block md:text-sm lg:text-base">
            {post.date}
          </i>
          <p className="my-1 md:my-2 lg:my-3 3xl:my-2 md:text-sm lg:text-base">
            {post.description}
          </p>
        </li>
      </Link>
    );
  });
}

function createSidebar(array: any[]) {
  return array.map((post) => {
    return (
      <Link
        href={`/docs/${post.slug}`}
        key={post.slug}
        className={roboto.className}
      >
        <li className="border-l-2 border-black dark:border-white pl-2">
          <h1 className="sm:text-xs md:text-sm lg:text-base 2xl:text-lg hover:font-medium">
            {post.title}
          </h1>
        </li>
      </Link>
    );
  });
}